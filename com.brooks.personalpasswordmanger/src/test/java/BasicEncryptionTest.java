import EncryptionRules.IEncryptionRule;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;

/**
 * Created by SlickJam on 5/14/2016.
 */
public class BasicEncryptionTest {

    private BasicEncryption basicEncryption;

    @Before
    public void setUp() throws Exception {
        byte[] key =  {-1, -40, -1, -32, 0, 16, 74, 70, 73, 70, 0, 1, 2, 0, 0, 1, 0, 1, 0, 0, -1, -37, 0, 67, 0, 8, 6, 6,
                7, 6, 5, 8, 7, 7, 7, 9, 9, 8, 10, 12, 20, 13, 12, 11, 11, 12, 25, 18, 19, 15, 20, 29, 26, 31, 30, 29, 26, 28,
                28, 32, 36, 46, 39, 32, 34, 44, 35, 28, 28, 40, 55, 41, 44, 48, 49, 52, 52, 52, 31, 39, 57, 61, 56, 50, 60, 46,
                51, 52, 50, -1, -37, 0, 67, 1, 9, 9, 9, 12, 11, 12, 24, 13, 13, 24, 50, 33, 28, 33, 50, 50, 50, 50, 50, 50, 50,
                50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
                50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, -1, -64, 0, 17, 8, 3, -124, 6, 64, 3, 1, 34, 0, 2, 17, 1, 3,
                17, 1, -1, -60, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, -60,
                0, -75, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34,
                113, 20, 50, -127, -111, -95, 8, 35, 66, -79, -63, 21, 82, -47, -16, 36, 51, 98, 114, -126, 9, 10, 22, 23, 24, 25, 26, 37,
                38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101,
                102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, -125, -124, -123, -122, -121, -120, -119, -118, -110, -109, -108,
                -107, -106, -105, -104, -103, -102, -94, -93, -92, -91, -90, -89, -88, -87, -86, -78, -77, -76, -75, -74, -73, -72, -71, -70, -62, -61,
                -60, -59, -58, -57, -56, -55, -54, -46, -45, -44, -43, -42, -41, -40, -39, -38, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -15, -14,
                -13, -12, -11, -10, -9, -8, -7, -6, -1, -60, 0, 31, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1,
                -60, 0, -75, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, -127, 8,
                20, 66, -111, -95, -79, -63, 9, 35, 51, 82, -16, 21, 98, 114, -47, 10, 22, 36, 52, -31, 37, -15, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54,
                55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119,
                120, 121, 122, -126, -125, -124, -123, -122, -121, -120, -119, -118, -110, -109, -108, -107, -106, -105, -104, -103, -102, -94, -93, -92, -91, -90,
                -89, -88, -87, -86, -78, -77, -76, -75, -74, -73, -72, -71, -70, -62, -61, -60, -59, -58, -57, -56, -55, -54, -46, -45, -44, -43, -42, -41, -40, -39,
                -38, -30, -29, -28, -27, -26, -25, -24, -23, -22, -14, -13, -12, -11, -10, -9, -8, -7, -6, -1, -38, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, -15, 95,
                -58, -127, -1, 0, -21, -92, -91, -6, -42, -122, 64, 63, 12, 82, -29, -44, 113, 64, -21, -59, 40, 29, 5, 0, 30, -65, -83, 56, 122, 118, -92, -25, 57,
                -17, -23, 64, -49, -31, -11, -96, 7, 119, -23, -11, -91, 29, -3, 63, -107, 32, 60, 14, -108, 127, 58, 0, 119, 126, 7, 35, -46, -109, -74, 61, 105, 15,
                3, -67, 47, -45, -13, -96, 3, -98, -25, 30, -90, -109, -81, 25, -93, -7, 81, -114, -71, -96, 5, 24, -49, -75, 72, -67, 62, -67, -70, 84, 107, -8, 30,
                -8, -87, 84, 112, 125, 104, 2, 85, -19, -100, -30, -90, 76, -32, 99, -65, 108, 84, 105, -112, -61, 7, -13, -87, 84, 18, 48, 51, -45, 31, 90, 100, -78,
                84, -32, -12, -28, 103, -114, -75, 40, -19, -127, -125, -114, 63, -49, 106, -115, 65, -32, 12, -19, -22, 49, -3, 63, -62, -91, 81, -49, 67, -122, -2,
                -9, 74, 98, 37, 24, -58, 14, 118, -25, -16, -1, 0, -21, 84, -22, 1, 36, 30, -66, -93, -80, -1, 0, 57, -88, 20, -128, 24, -25, -89, 63, -18, -1, 0, -115,
                78, -96, 47, -35, 11, -127, -127, -127, -44, 123, 85, 18, 78, -125, 35, 56, -32, -113, -82, 63, -6, -11, 32, -56, -7, 70, 122, -25, -73, 92, 119, -11,
                -59, 70, -128, 12, 16, -93, 25, -17, -45, -1, 0, -83, 86, 20, 116, -58, 70, 125, -65, 26, 98, 19, 0, -87, 32, 103, -72, 63, -25, -23, 74, 48, 78, 14, 9,
                61, -77, -4, -87, 120, -32, -25, 118, 57, 4, 54, 126, -76, 96, 1, -128, 115, -128, 51, -113, -89, -7, -6, -48, 3, 114, 89, 78, 8, 32, -14, -8, 29, 71, -12,
                20, -125, -111, -100, 100, 117, -55, -18, 71, -7, -4, 105, 72, 4, 113, -122, 57, -49, 30, -66, -76, 103, 36, -98, 125, 62, -9, -13, 63, -31, 64, 8, 79, 57,
                24, 28, 125, 71, -31, 81, -100, 113, -111, -44, 117, 39, 20, -26, -28, -25, 60, -114, -68, 126, 21, 19, 99, -33, -15, -19, -118, 6, -122, -79, -56, -56, 80,
                -61, 57, -63, 24, 4, -12, -26, -95, 35, -48, 119, -32, -100, -1, 0, -111, 82, 57, -35, -13, 117, 39, -125, -114, 42, 38, 32, -85, 28, -127, -112, 51, -113,
                -46, -112, -47, 25, 61, 120, 35, 60, -32, -102, -119, -58, 14, 49, -14, -6, 103, -12, 6, -90, 98, -68, -9, 83, -40, -15, -113, -16, 21, 27, 2, 114, 113, -100,
                119, -21, -11, -92, 50, 7, 83, -116, -11, -64, 24, -30, -94, 35, 0, 127, 74, -99, -122, 15, 32, -126, 57, -28, -44, 108, 8, 29, 88, -15, -114, -99, 127, -49};

        basicEncryption = new BasicEncryption(key);
    }

    @After
    public void tearDown() throws Exception {

    }

    @Test
    public void encryptWithRequirePasswordLengthOf32() throws Exception {

        String plainTextPassword = "test1";
        List<IEncryptionRule> mockRules = mock(List.class);
        mockRules.add(mock(IEncryptionRule.class));
        AccountInformation ai = new AccountInformation("Amazon", plainTextPassword, mockRules);

        String result = basicEncryption.encrypt(ai);

        assertNotEquals(result,plainTextPassword);

    }

}